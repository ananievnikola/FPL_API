// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TopkaE.FPLDataDownloader.DBContext;

namespace TopkaE.FPLDataDownloader.Migrations
{
    [DbContext(typeof(TopkaEContext))]
    [Migration("20200205165706_FirstNameLenghtFix")]
    partial class FirstNameLenghtFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TopkaE.FPLDataDownloader.Models.InputModels.Element", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Assists");

                    b.Property<int>("Bonus");

                    b.Property<int>("Bps");

                    b.Property<int?>("ChanceOfPlayingNextRound");

                    b.Property<int?>("ChanceOfPlayingThisRound");

                    b.Property<int>("CleanSheets");

                    b.Property<int>("Code");

                    b.Property<int>("CostChangeEvent");

                    b.Property<int>("CostChangeEventFall");

                    b.Property<int>("CostChangeStart");

                    b.Property<int>("CostChangeStartFall");

                    b.Property<string>("Creativity")
                        .HasColumnType("VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<int>("DreamteamCount");

                    b.Property<int>("ElementType");

                    b.Property<string>("EpNext")
                        .HasColumnType("VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<string>("EpThis")
                        .HasColumnType("VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<int>("EventPoints");

                    b.Property<string>("FirstName")
                        .HasColumnType("VARCHAR(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<string>("Form")
                        .HasColumnType("VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<int>("GoalsConceded");

                    b.Property<int>("GoalsScored");

                    b.Property<string>("IctIndex")
                        .HasColumnType("VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<bool>("InDreamteam");

                    b.Property<string>("Influence")
                        .HasColumnType("VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<int>("Minutes");

                    b.Property<string>("News")
                        .HasColumnType("VARCHAR(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<DateTime?>("NewsAdded");

                    b.Property<int>("NowCost");

                    b.Property<int>("OwnGoals");

                    b.Property<int>("PenaltiesMissed");

                    b.Property<int>("PenaltiesSaved");

                    b.Property<string>("Photo")
                        .HasColumnType("VARCHAR(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<string>("PointsPerGame")
                        .HasColumnType("VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<int>("RedCards");

                    b.Property<int>("Saves");

                    b.Property<string>("SecondName")
                        .HasColumnType("VARCHAR(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<string>("SelectedByPercent")
                        .HasColumnType("VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<bool>("Special");

                    b.Property<string>("Status")
                        .HasColumnType("VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 64)))
                        .HasColumnType("VARCHAR(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<int>("TeamCode");

                    b.Property<string>("TeamName")
                        .HasColumnType("VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<string>("Threat")
                        .HasColumnType("VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<int>("TotalPoints");

                    b.Property<int>("TransfersIn");

                    b.Property<int>("TransfersInEvent");

                    b.Property<int>("TransfersOut");

                    b.Property<int>("TransfersOutEvent");

                    b.Property<string>("ValueForm")
                        .HasColumnType("VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<string>("ValueSeason")
                        .HasColumnType("VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<string>("WebName")
                        .HasColumnType("VARCHAR(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<int>("YellowCards");

                    b.HasKey("Id");

                    b.ToTable("Elements");
                });

            modelBuilder.Entity("TopkaE.FPLDataDownloader.Models.InputModels.Fixture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Code");

                    b.Property<int>("Difficulty");

                    b.Property<int>("ElementId");

                    b.Property<int?>("Event");

                    b.Property<string>("EventName")
                        .HasColumnType("VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<bool>("Finished");

                    b.Property<bool>("IsHome");

                    b.Property<DateTime?>("KickoffTime");

                    b.Property<int>("Minutes");

                    b.Property<bool>("ProvisionalStartTime");

                    b.Property<int>("TeamA");

                    b.Property<int?>("TeamAScore");

                    b.Property<int>("TeamH");

                    b.Property<int?>("TeamHScore");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.ToTable("Fixtures");
                });

            modelBuilder.Entity("TopkaE.FPLDataDownloader.Models.InputModels.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Assists");

                    b.Property<int>("BPS");

                    b.Property<int>("Bonus");

                    b.Property<int>("CleanSheets");

                    b.Property<string>("Creativity")
                        .HasColumnType("VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<int>("Element");

                    b.Property<int>("ElementId");

                    b.Property<int>("Fixture");

                    b.Property<int>("GoalsConceded");

                    b.Property<int>("GoalsScored");

                    b.Property<string>("ICTndex")
                        .HasColumnType("VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<string>("Influence")
                        .HasColumnType("VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<DateTime?>("KickoffTime");

                    b.Property<int>("Minutes");

                    b.Property<int>("OpponentTeam");

                    b.Property<int>("OwnGoals");

                    b.Property<int>("PenaltiesMissed");

                    b.Property<int>("PenaltiesSaved");

                    b.Property<int>("RedCards");

                    b.Property<int>("Round");

                    b.Property<int>("Saves");

                    b.Property<int>("Selected");

                    b.Property<int?>("TeamAScore");

                    b.Property<int?>("TeamHScore");

                    b.Property<string>("Threat")
                        .HasColumnType("VARCHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

                    b.Property<int>("TotalPoints");

                    b.Property<int>("TransfersBalance");

                    b.Property<int>("TransfersIn");

                    b.Property<int>("TransfersOut");

                    b.Property<int>("Value");

                    b.Property<bool>("WasHome");

                    b.Property<int>("YellowCards");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("TopkaE.FPLDataDownloader.Models.InputModels.Fixture", b =>
                {
                    b.HasOne("TopkaE.FPLDataDownloader.Models.InputModels.Element")
                        .WithMany("Fixtures")
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TopkaE.FPLDataDownloader.Models.InputModels.History", b =>
                {
                    b.HasOne("TopkaE.FPLDataDownloader.Models.InputModels.Element")
                        .WithMany("Histories")
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
